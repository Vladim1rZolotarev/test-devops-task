events {
    worker_connections 1024;
}

http {
    # JSON формат логов для Loki
    log_format json_logs escape=json
    '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"request_time":"$request_time"'
    '}';

    access_log /var/log/nginx/access.log json_logs;
    error_log /var/log/nginx/error.log warn;

    upstream flask_backend {
        server flask-app:5000;  # Используем имя сервиса из docker-compose
    }

    server {
        listen 80;

        location / {
            proxy_pass http://flask_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Дополнительные настройки для балансировки
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 2s;
            proxy_read_timeout 30s;
        }

        # Отключение логов для health-check
        location = /health {
            access_log off;
            proxy_pass http://flask_backend;
        }
    }
}
