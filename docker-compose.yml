services:
  flask-app:
    image: vladim1rzolotarev/flask-app:latest
    build:
      context: .
    expose:
      - "5000"
    environment:
      - FLASK_ENV=production
    networks:
      - my_network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "prometheus-job=flask-app"
      - "prometheus-port=5000"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/logs:/var/log/nginx
      - nextcloud_data:/var/www/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - flask-app
      - grafana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - my_network
    labels:
      - "prometheus-job=nginx"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx/basic_status'
    networks:
      - my_network
    restart: unless-stopped
    depends_on:
      - nginx

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - my_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - my_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    depends_on:
      - alertmanager

  grafana:
    image: grafana/grafana:latest
    expose:
      - "3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - my_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    volumes:
      - grafana_data:/var/lib/grafana
      - /etc/letsencrypt/live/zolotarev.tech/fullchain.pem:/etc/grafana/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/zolotarev.tech/privkey.pem:/etc/grafana/certs/privkey.pem:ro
    environment:
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=metrics.zolotarev.tech
      - GF_SERVER_ROOT_URL=https://metrics.zolotarev.tech
      - GF_SECURITY_ADMIN_PASSWORD=secure_password
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=none

  loki:
    image: grafana/loki:latest
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - my_network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./nginx/logs:/var/log/nginx
      - ./app/logs:/var/log/flask
      - ./promtail-config.yml:/etc/promtail/config.yml
    command:
      - '-config.file=/etc/promtail/config.yml'
    networks:
      - my_network
    restart: unless-stopped
    depends_on:
      - loki

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - my_network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - my_network

  nextcloud:
    image: nextcloud:stable-fpm-alpine
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - nextcloud_data:/var/www/html
    expose:
      - "9000"
    networks:
      - my_network

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  grafana_data:
  loki_data:
  prometheus_data:
  alertmanager_data:
  redis_data:
  nextcloud_data:
  postgres_data:
