name: Deploy to Staging and Production

on:
  push:
    branches:
      - feature
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: vladim1rzolotarev/flask-app
      COMPOSE_PROJECT_NAME: flask-app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Determine tag
      id: tag
      run: |
        if [[ $GITHUB_REF == 'refs/heads/master' ]]; then
          echo "TAG=latest" >> $GITHUB_OUTPUT
          echo "COMPOSE_ENV=production" >> $GITHUB_OUTPUT
        else
          echo "TAG=staging" >> $GITHUB_OUTPUT
          echo "COMPOSE_ENV=staging" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      run: |
        docker buildx build \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new \
          -t $DOCKER_IMAGE:${{ steps.tag.outputs.TAG }} \
          --push .

    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -euo pipefail
          if ! sudo docker plugin ls | grep -q "loki"; then
            sudo docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || {
              echo "Failed to install Loki plugin"
              exit 1
            }
          fi
          
          cd ~/test-devops-task
          git -c safe.directory='*' pull origin ${{ github.ref_name }}
          
          # Параллельная загрузка образов
          sudo docker compose pull --quiet &
          PID=$!
          
          # Остановка старых контейнеров (параллельно с загрузкой)
          sudo docker compose down --timeout 30 || true
          
          # Ожидание завершения загрузки
          wait $PID
          
          # Запуск с проверкой
          sudo docker compose up -d --remove-orphans
          
          # Динамическая проверка здоровья
          timeout 120 bash -c 'while [[ $(sudo docker compose ps --services --filter "status=running" | wc -l) -lt $(sudo docker compose config --services | wc -l) ]]; do
            sudo docker compose ps
            sleep 5
          done'
          
          echo "Deployment successful"

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
    - name: Rollback on failure
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -euo pipefail
          cd ~/test-devops-task
          
          # Откат с сохранением данных
          sudo docker compose down --timeout 30 || true
          sudo docker pull vladim1rzolotarev/flask-app:rollback
          sudo docker tag vladim1rzolotarev/flask-app:rollback vladim1rzolotarev/flask-app:${{ needs.deploy.outputs.TAG }}
          
          # Запуск только основных сервисов
          sudo docker compose up -d flask-app nginx
          
          echo "Rollback completed. Monitoring services..."
          timeout 60 bash -c 'while ! sudo docker compose ps | grep -q "Up (healthy)"; do sleep 5; done'
